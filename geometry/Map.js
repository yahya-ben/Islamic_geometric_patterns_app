// The Map class will serve as the scafoolding that will hold our polygons
/*
 * From https://www.redblobgames.com/grids/parts/
 * Copyright 2021 Red Blob Games <redblobgames@gmail.com>
 * License: Apache-2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>
 */

/* This code was partially generated by Haxe, but then I manually cleaned it up */

const SQRT_3_2 = Math.sqrt(3) / 2;

export class FiniteGrid {
  constructor(grid, shape) {
    this.grid = grid;
    this.tiles = shape;
    this.edges = [];
    this.vertices = [];
    this.lookupTile = new Map();
    this.lookupEdge = new Map();
    this.lookupVertex = new Map();

    for (let tile of this.tiles) {
      this.lookupTile.set(tile.key, tile);

      for (let edge of this.grid.borders(tile)) {
        if (!this.lookupEdge.has(edge.key)) {
          this.lookupEdge.set(edge.key, edge);
          this.edges.push(edge);
        }
      }

      for (let vertex of this.grid.corners(tile)) {
        if (!this.lookupVertex.has(vertex.key)) {
          this.lookupVertex.set(vertex.key, vertex);
          this.vertices.push(vertex);
        }
      }
    }
  }

  vertexToScreen(vertex) {
    return this.grid.vertexToScreen(vertex);
  }
  neighbors(tile) {
    return FiniteGrid.filterBy(this.grid.neighbors(tile), this.lookupTile);
  }
  joins(edge) {
    return FiniteGrid.filterBy(this.grid.joins(edge), this.lookupTile);
  }
  touches(vertex) {
    return FiniteGrid.filterBy(this.grid.touches(vertex), this.lookupTile);
  }
  borders(tile) {
    return FiniteGrid.filterBy(this.grid.borders(tile), this.lookupEdge);
  }
  continues(edge) {
    return FiniteGrid.filterBy(this.grid.continues(edge), this.lookupEdge);
  }
  protrudes(vertex) {
    return FiniteGrid.filterBy(this.grid.protrudes(vertex), this.lookupEdge);
  }
  corners(tile) {
    return FiniteGrid.filterBy(this.grid.corners(tile), this.lookupVertex);
  }
  endpoints(edge) {
    return FiniteGrid.filterBy(this.grid.endpoints(edge), this.lookupVertex);
  }
  adjacent(vertex) {
    return FiniteGrid.filterBy(this.grid.adjacent(vertex), this.lookupVertex);
  }
}
